apiVersion: v1
kind: ConfigMap
metadata:
  name: freqtrade-config
data:
  config.json: |
    {
      "max_open_trades": 3,
      "stake_currency": "USDT",
      "stake_amount": 10,
      "tradable_balance_ratio": 0.99,
      "fiat_display_currency": "USD",
      "dry_run": true,
      "dry_run_wallet": 1000,
      "cancel_open_orders_on_exit": false,
      "trading_mode": "spot",
      "margin_mode": "",
      "unfilledtimeout": {
        "entry": 10,
        "exit": 10,
        "exit_timeout_count": 0,
        "unit": "minutes"
      },
      "entry_pricing": {
        "price_side": "same",
        "use_order_book": true,
        "order_book_top": 1,
        "price_last_balance": 0.0,
        "check_depth_of_market": {
          "enabled": false,
          "bids_to_ask_delta": 1
        }
      },
      "exit_pricing": {
        "price_side": "same",
        "use_order_book": true,
        "order_book_top": 1
      },
      "exchange": {
        "name": "binance",
        "key": "",
        "secret": "",
        "ccxt_config": {},
        "ccxt_async_config": {},
        "pair_whitelist": [
          "BTC/USDT",
          "ETH/USDT",
          "XRP/USDT"
        ],
        "pair_blacklist": []
      },
      "pairlists": [
        {
          "method": "StaticPairList"
        }
      ],
      "telegram": {
        "enabled": false,
        "token": "",
        "chat_id": ""
      },
      "api_server": {
        "enabled": true,
        "listen_ip_address": "0.0.0.0",
        "listen_port": 8080,
        "verbosity": "error",
        "enable_openapi": true,
        "jwt_secret_key": "your-secret-key",
        "CORS_origins": ["*"],
        "username": "freqtrader",
        "password": "password"
      },
      "bot_name": "freqtrade",
      "initial_state": "running",
      "force_entry_enable": false,
      "internals": {
        "process_throttle_secs": 5
      }
    }
  strategy.py: |
    from freqtrade.strategy.interface import IStrategy
    import talib.abstract as ta
    import pandas as pd
    
    class SimpleStrategy(IStrategy):
        minimal_roi = {
            "0": 0.01
        }
        stoploss = -0.10
        timeframe = '5m'
        
        def populate_indicators(self, dataframe, metadata):
            dataframe['rsi'] = ta.RSI(dataframe)
            return dataframe
            
        def populate_buy_trend(self, dataframe, metadata):
            dataframe.loc[
                (dataframe['rsi'] < 30),
                'buy'] = 1
            return dataframe
            
        def populate_sell_trend(self, dataframe, metadata):
            dataframe.loc[
                (dataframe['rsi'] > 70),
                'sell'] = 1
            return dataframe
